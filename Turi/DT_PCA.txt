In [4]: train, test = january.random_split(0.8)

In [5]: test, validation = test.random_split(0.5)

In [6]: decisionTree = gl.decision_tree_classifier.create(train, target='IS_LATE', features=['DAY_OF_WEEK', 'DEPARTURE_TIME', 'TAXI_OUT', 'WHEELS_OFF', 'SCHEDULED_TIME', 'ELAPSED_TIME', 'TAXI_IN', 'ARRIVAL_TIME'], valid
validation      validation_set=

In [6]: decisionTree = gl.decision_tree_classifier.create(train, target='IS_LATE', features=['DAY_OF_WEEK', 'DEPARTURE_TIME', 'TAXI_OUT', 'WHEELS_OFF', 'SCHEDULED_TIME', 'ELAPSED_TIME', 'TAXI_IN', 'ARRIVAL_TIME'], validation_set = validation)
Decision tree classifier:
--------------------------------------------------------
Number of examples          : 366057
Number of classes           : 2
Number of feature columns   : 8
Number of unpacked features : 8
+-----------+--------------+-------------------+---------------------+-------------------+---------------------+
| Iteration | Elapsed Time | Training-accuracy | Validation-accuracy | Training-log_loss | Validation-log_loss |
+-----------+--------------+-------------------+---------------------+-------------------+---------------------+
| 1         | 0.288770     | 0.825380          | 0.822469            | 0.576133          | 0.577393            |
+-----------+--------------+-------------------+---------------------+-------------------+---------------------+



--------------------------------------------------------
Number of examples          : 365994
Number of classes           : 2
Number of feature columns   : 20
Number of unpacked features : 20
+-----------+--------------+-------------------+---------------------+-------------------+---------------------+
| Iteration | Elapsed Time | Training-accuracy | Validation-accuracy | Training-log_loss | Validation-log_loss |
+-----------+--------------+-------------------+---------------------+-------------------+---------------------+
| 1         | 0.477269     | 0.810879          | 0.811389            | 0.583759          | 0.583712            |
+-----------+--------------+-------------------+---------------------+-------------------+---------------------+

In [8]: predicitons = decisionTree.classify(test)

In [9]: results = decisionTree.evaluate(test)

In [11]: predicitons
Out[11]:
Columns:
        class   int
        probability     float

Rows: 45785

Data:
+-------+----------------+
| class |  probability   |
+-------+----------------+
|   0   | 0.629154384136 |
|   0   | 0.629154384136 |
|   0   | 0.629154384136 |
|   0   | 0.629154384136 |
|   0   | 0.629154384136 |
|   0   | 0.629154384136 |
|   0   | 0.629154384136 |
|   0   | 0.629154384136 |
|   0   | 0.629154384136 |
|   0   | 0.629154384136 |
+-------+----------------+
[45785 rows x 2 columns]



In [12]: results
Out[12]:
{'accuracy': 0.8252702850278475,
 'auc': 0.7120986809313385,
 'confusion_matrix': Columns:
        target_label    int
        predicted_label int
        count   int

 Rows: 4

 Data:
 +--------------+-----------------+-------+
 | target_label | predicted_label | count |
 +--------------+-----------------+-------+
 |      0       |        1        |  603  |
 |      1       |        1        |  1714 |
 |      1       |        0        |  7397 |
 |      0       |        0        | 36071 |
 +--------------+-----------------+-------+
 [4 rows x 3 columns],
 'f1_score': 0.29996499824991246,
 'log_loss': 0.5764306469879382,
 'precision': 0.7397496763055675,
 'recall': 0.18812424541762704,
 'roc_curve': Columns:
        threshold       float
        fpr     float
        tpr     float
        p       int
        n       int

 Rows: 100001

 Data:
 +-----------+-----+-----+------+-------+
 | threshold | fpr | tpr |  p   |   n   |
 +-----------+-----+-----+------+-------+
 |    0.0    | 1.0 | 1.0 | 9111 | 36674 |
 |   1e-05   | 1.0 | 1.0 | 9111 | 36674 |
 |   2e-05   | 1.0 | 1.0 | 9111 | 36674 |
 |   3e-05   | 1.0 | 1.0 | 9111 | 36674 |
 |   4e-05   | 1.0 | 1.0 | 9111 | 36674 |
 |   5e-05   | 1.0 | 1.0 | 9111 | 36674 |
 |   6e-05   | 1.0 | 1.0 | 9111 | 36674 |
 |   7e-05   | 1.0 | 1.0 | 9111 | 36674 |
 |   8e-05   | 1.0 | 1.0 | 9111 | 36674 |
 |   9e-05   | 1.0 | 1.0 | 9111 | 36674 |
 +-----------+-----+-----+------+-------+
 [100001 rows x 5 columns]
 
 
 
 ************************************************
 In [20]: results
Out[20]:
{'accuracy': 0.8116219390196163,
 'auc': 0.7025507799260449,
 'confusion_matrix': Columns:
        target_label    int
        predicted_label int
        count   int

 Rows: 4

 Data:
 +--------------+-----------------+-------+
 | target_label | predicted_label | count |
 +--------------+-----------------+-------+
 |      1       |        1        |  1113 |
 |      0       |        1        |  542  |
 |      1       |        0        |  8120 |
 |      0       |        0        | 36207 |
 +--------------+-----------------+-------+
 [4 rows x 3 columns],
 'f1_score': 0.2044452608376194,
 'log_loss': 0.5834983358309147,
 'precision': 0.6725075528700907,
 'recall': 0.12054586808188021,
 'roc_curve': Columns:
        threshold       float
        fpr     float
        tpr     float
        p       int
        n       int

 Rows: 100001
 
 
 In [23]: results
Out[23]:
{'accuracy': 0.809775690268206,
 'auc': 0.7022933137053986,
 'confusion_matrix': Columns:
        target_label    int
        predicted_label int
        count   int

 Rows: 4

 Data:
 +--------------+-----------------+-------+
 | target_label | predicted_label | count |
 +--------------+-----------------+-------+
 |      1       |        1        |  1491 |
 |      1       |        0        |  7724 |
 |      0       |        0        | 35404 |
 |      0       |        1        |  943  |
 +--------------+-----------------+-------+
 [4 rows x 3 columns],
 'f1_score': 0.25598763842389904,
 'log_loss': 0.5841897885726796,
 'precision': 0.6125718981101068,
 'recall': 0.16180141074335322,
 'roc_curve': Columns:
        threshold       float
        fpr     float
        tpr     float
        p       int
        n       int

 Rows: 100001

 Data:
 +-----------+-----+-----+------+-------+
 | threshold | fpr | tpr |  p   |   n   |
 +-----------+-----+-----+------+-------+
 |    0.0    | 1.0 | 1.0 | 9215 | 36347 |
 |   1e-05   | 1.0 | 1.0 | 9215 | 36347 |
 |   2e-05   | 1.0 | 1.0 | 9215 | 36347 |
 |   3e-05   | 1.0 | 1.0 | 9215 | 36347 |
 |   4e-05   | 1.0 | 1.0 | 9215 | 36347 |
 |   5e-05   | 1.0 | 1.0 | 9215 | 36347 |
 |   6e-05   | 1.0 | 1.0 | 9215 | 36347 |
 |   7e-05   | 1.0 | 1.0 | 9215 | 36347 |
 |   8e-05   | 1.0 | 1.0 | 9215 | 36347 |
 |   9e-05   | 1.0 | 1.0 | 9215 | 36347 |
 +-----------+-----+-----+------+-------+
 [100001 rows x 5 columns]
 Note: Only the head of the SFrame is printed.
 You can use print_rows(num_rows=m, num_columns=n) to print more rows and columns.}